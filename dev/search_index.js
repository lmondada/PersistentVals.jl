var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PersistentVals","category":"page"},{"location":"#PersistentVals","page":"Home","title":"PersistentVals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PersistentVals.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PersistentVals]","category":"page"},{"location":"#PersistentVals.AbstractPVal","page":"Home","title":"PersistentVals.AbstractPVal","text":"Abstract type for a persistent value.\n\nA persistent value can be set at a timestamp::D and recovered later using that timestamp. Updates at different timestamps may or may not change the result at other (eg future) timestamps.\n\nInterface\n\nBase.get(v::AbstractVal{T,D}, d::D): value at timestanp d.\nset!(v::AbstractVal{T,D}, newv::T, d::D): set value to newv at timestamp d.\n\n\n\n\n\n","category":"type"},{"location":"#PersistentVals.TreeOrder","page":"Home","title":"PersistentVals.TreeOrder","text":"A partial order under â‰¤ in a tree structure.\n\nWhen TreePVal needs to expand a leaf, it will call the children method (see below). This means that we can \"invalidate\" certain histories: by ignoring certain branches of the tree, we render them impossible.\n\n\n\n\n\n","category":"type"},{"location":"#PersistentVals.TreePVal","page":"Home","title":"PersistentVals.TreePVal","text":"TreePVal{T,D <: TreeOrder}\n\nPersistent value for a tree-shaped history.\n\nValues are only stored in leaves. Trying to access the value of a non-leaf node will throw _TimestampInvalid. Trying to access a value that is outside of the tree (as defined by the children function) will also throw _TimestampInvalid.\n\nType parameters\n\nT: The stored value type.\nD: The timestamp type. Must be a tree-shaped partial order under <. The root must   be accessible as zero(::D). children(d::D) should give the children of node d in the   partial order.\n\n\n\n\n\n","category":"type"},{"location":"#PersistentVals.TreePVal-Union{Tuple{D}, Tuple{T}, Tuple{T, D}} where {T, D}","page":"Home","title":"PersistentVals.TreePVal","text":"TreePVal{T,D<:TreeOrder}(val::T, date::D=zero(D), children=[])\n\nConstruct a TreePVal.\n\nArguments\n\nval: The value at timestamp date.\ndate: The current timestamp. Defaults to zero, which should be the root of D.\n\n\n\n\n\n","category":"method"},{"location":"#PersistentVals._TimestampInvalid","page":"Home","title":"PersistentVals._TimestampInvalid","text":"Error thrown when trying to access an inaccessible timestamp\n\n\n\n\n\n","category":"type"},{"location":"#Base.get-Union{Tuple{D}, Tuple{T}, Tuple{AbstractPVal{T, D}, D}} where {T, D}","page":"Home","title":"Base.get","text":"get(v::AbstractPVal{T,D}, d::D)\n\nGet value of persistent data v at time d.\n\n\n\n\n\n","category":"method"},{"location":"#PersistentVals.children-Tuple{TreeOrder}","page":"Home","title":"PersistentVals.children","text":"children(n::TreeOrder; target=nothing)\n\nThe list of children of n in the TreeOrder. Optionally, target can be used to create a subtree of the entire TreeOrder.\n\n\n\n\n\n","category":"method"},{"location":"#PersistentVals.set!-Union{Tuple{D}, Tuple{T}, Tuple{AbstractPVal{T, D}, T, D}} where {T, D}","page":"Home","title":"PersistentVals.set!","text":"set!(v::AbstractPVal{T,D}, newv::T, d::D)\n\nSet value v to newv at time d.\n\n\n\n\n\n","category":"method"}]
}
